{"version":3,"sources":["redux/index.ts","redux/actions.ts","redux/reducers.ts","localStorage.ts","components/TreeItem/TreeItem.tsx","components/TreeList.tsx","App.tsx","index.tsx"],"names":["addRootTreeItem","id","type","addChildTreeItem","parentId","allParentIdsOfParent","deleteTreeItem","editTreeItem","title","setTreeItemIdOnEditMode","treeItemIdOnEditMode","rootReducer","combineReducers","treeItems","action","allParentIds","treeItemIndex","findIndex","item","newTreeItems","deletingItemId","filter","includes","saveTreeItems","localStorage","setItem","JSON","stringify","err","console","error","TreeItem","treeItem","dispatch","useDispatch","useSelector","state","React","useState","collapsed","setCollapsed","changeTitle","setChangedTitle","handleTreeItemDeletion","handleSaveTreeItemTitle","value","ListItem","divider","onClick","Input","style","marginRight","color","onKeyDown","currentTarget","key","onChange","event","onBlur","placeholder","disableUnderline","fullWidth","autoFocus","ListItemText","primary","ListItemSecondaryAction","IconButton","uuid","edge","paddingLeft","child","map","TreeList","Fragment","aria-label","fontSize","List","App","Container","store","createStore","stateFromLocalStorage","getItem","parse","loadTreeItems","subscribe","a","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84770540.chunk.js","sourcesContent":["export {\n  addRootTreeItem,\n  addChildTreeItem,\n  editTreeItem,\n  deleteTreeItem,\n  setTreeItemIdOnEditMode,\n} from \"./actions\";\nexport { rootReducer } from \"./reducers\";\nexport * from \"./state\";\n","import { State } from \"./index\";\nimport { TreeItemView } from \"../components/TreeItem/TreeItem.types\";\n\ntype Action<TType extends string = string, TPayload extends object = {}> = {\n  type: TType\n} & TPayload;\n\nexport type AddRootTreeItemAction = Action<\n  \"ADD_ROOT_TREE_ITEM\",\n  Pick<TreeItemView, \"id\">\n>;\n\nexport type AddChildTreeItemAction = Action<\n  \"ADD_CHILD_TREE_ITEM\",\n  Required<\n    Pick<TreeItemView, \"id\" | \"parentId\"> & {\n      allParentIdsOfParent: TreeItemView[\"allParentIds\"];\n    }\n  >\n>;\n\nexport type DeleteTreeItemAction = Action<\n  \"DELETE_TREE_ITEM\",\n  Pick<TreeItemView, \"id\">\n>;\n\nexport type EditTreeItemAction = Action<\n  \"EDIT_TREE_ITEM\",\n  Pick<TreeItemView, \"id\" | \"title\">\n>;\n\nexport const addRootTreeItem = (\n  id: TreeItemView[\"id\"]\n): AddRootTreeItemAction => {\n  return {\n    type: \"ADD_ROOT_TREE_ITEM\",\n    id,\n  };\n};\n\nexport const addChildTreeItem = (\n  id: TreeItemView[\"id\"],\n  parentId: Required<TreeItemView>[\"parentId\"],\n  allParentIdsOfParent: Required<TreeItemView>[\"allParentIds\"]\n): AddChildTreeItemAction => {\n  return {\n    type: \"ADD_CHILD_TREE_ITEM\",\n    id,\n    parentId,\n    allParentIdsOfParent,\n  };\n};\n\nexport const deleteTreeItem = (\n  id: TreeItemView[\"id\"]\n): DeleteTreeItemAction => {\n  return {\n    type: \"DELETE_TREE_ITEM\",\n    id,\n  };\n};\n\nexport const editTreeItem = (\n  id: TreeItemView[\"id\"],\n  title: TreeItemView[\"title\"]\n): EditTreeItemAction => {\n  return {\n    type: \"EDIT_TREE_ITEM\",\n    id,\n    title,\n  };\n};\n\nexport type SetTreeItemIdOnEditModeAction = Action<\n  \"SET_TREE_ITEM_ID_ON_EDIT_MODE\",\n  Pick<State, \"treeItemIdOnEditMode\">\n>;\n\nexport const setTreeItemIdOnEditMode = (\n  treeItemIdOnEditMode: State[\"treeItemIdOnEditMode\"]\n): SetTreeItemIdOnEditModeAction => {\n  return {\n    type: \"SET_TREE_ITEM_ID_ON_EDIT_MODE\",\n    treeItemIdOnEditMode,\n  };\n};\n","import { Reducer, combineReducers } from \"redux\";\n\nimport { State } from \"./state\";\nimport {\n  AddRootTreeItemAction,\n  AddChildTreeItemAction,\n  EditTreeItemAction,\n  DeleteTreeItemAction,\n  SetTreeItemIdOnEditModeAction,\n} from \"./actions\";\n\nexport const treeItems: Reducer<\n  State[\"treeItems\"],\n  | AddRootTreeItemAction\n  | AddChildTreeItemAction\n  | EditTreeItemAction\n  | DeleteTreeItemAction\n> = (treeItems = [], action) => {\n  switch (action.type) {\n    case \"ADD_ROOT_TREE_ITEM\":\n      return [\n        ...treeItems,\n        {\n          id: action.id,\n          title: \"\",\n          allParentIds: [],\n        },\n      ];\n    case \"ADD_CHILD_TREE_ITEM\": {\n      const { id, parentId, allParentIdsOfParent } = action;\n\n      return [\n        ...treeItems,\n        {\n          id,\n          parentId,\n          title: \"\",\n          allParentIds: [\n            ...(allParentIdsOfParent ? allParentIdsOfParent : []),\n            parentId,\n          ],\n        },\n      ];\n    }\n    case \"EDIT_TREE_ITEM\": {\n      const { id, title } = action;\n      const treeItemIndex = treeItems.findIndex((item) => item.id === id);\n      const newTreeItems = [...treeItems];\n      newTreeItems[treeItemIndex].title = title;\n\n      return newTreeItems;\n    }\n    case \"DELETE_TREE_ITEM\": {\n      const { id: deletingItemId } = action;\n      return treeItems.filter(\n        ({ id, allParentIds }) =>\n          allParentIds &&\n          !allParentIds.includes(deletingItemId) &&\n          id !== deletingItemId\n      );\n    }\n    default:\n      return treeItems;\n  }\n};\n\nexport const treeItemIdOnEditMode: Reducer<\n  State[\"treeItemIdOnEditMode\"],\n  SetTreeItemIdOnEditModeAction\n> = (id = null, action) => {\n  return action.type === \"SET_TREE_ITEM_ID_ON_EDIT_MODE\"\n    ? action.treeItemIdOnEditMode\n    : id;\n};\n\nexport const rootReducer = combineReducers({\n  treeItems,\n  treeItemIdOnEditMode,\n});\n","import { TreeItemView } from \"./components/TreeItem/TreeItem.types\";\n\nexport const loadTreeItems = (): TreeItemView[] => {\n  try {\n    const stateFromLocalStorage = localStorage.getItem(\"treeItems\");\n\n    if (!stateFromLocalStorage) {\n      return [];\n    }\n\n    const treeItems: TreeItemView[] = JSON.parse(stateFromLocalStorage);\n\n    return treeItems.filter((treeItem) => treeItem.title);\n  } catch (err) {\n    console.error(err);\n\n    return [];\n  }\n};\n\nexport const saveTreeItems = (treeItems: TreeItemView[]) => {\n  try {\n    localStorage.setItem(\"treeItems\", JSON.stringify(treeItems));\n  } catch (err) {\n    console.error(err);\n  }\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as uuid } from \"uuid\";\n\nimport Input, { InputProps } from \"@material-ui/core/Input\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport {\n  addChildTreeItem,\n  editTreeItem,\n  deleteTreeItem,\n  setTreeItemIdOnEditMode,\n  State,\n} from \"../../redux\";\n\nimport { TreeItemViewProps } from \"./TreeItem.types\";\n\nexport const TreeItem: React.FC<TreeItemViewProps> = ({ treeItem }) => {\n  const { title } = treeItem;\n  const dispatch = useDispatch();\n  const treeItems = useSelector<State, State[\"treeItems\"]>(\n    (state) => state.treeItems\n  );\n\n  const treeItemIdOnEditMode = useSelector<\n    State,\n    State[\"treeItemIdOnEditMode\"]\n  >((state) => state.treeItemIdOnEditMode);\n  const [collapsed, setCollapsed] = React.useState(true);\n  const [changeTitle, setChangedTitle] = React.useState(title);\n\n  const handleChildTreeItemAddition = () => {\n    const id = uuid();\n    dispatch(addChildTreeItem(id, treeItem.id, treeItem.allParentIds));\n    dispatch(setTreeItemIdOnEditMode(id));\n    setCollapsed(false);\n  };\n\n  const handleTreeItemEdition = () => {\n    dispatch(setTreeItemIdOnEditMode(treeItem.id));\n  };\n\n  const handleTreeItemDeletion = () => {\n    dispatch(deleteTreeItem(treeItem.id));\n  };\n\n  const handleSaveTreeItemTitle: (value: string) => void = (value: string) => {\n    if (!value && !title) {\n      handleTreeItemDeletion();\n    } else {\n      dispatch(editTreeItem(treeItem.id, value || title));\n      dispatch(setTreeItemIdOnEditMode(null));\n      setChangedTitle(value || title);\n    }\n  };\n\n  const handleEnterPress: InputProps[\"onKeyDown\"] = ({\n    currentTarget: { value },\n    key,\n  }) => {\n    if (key === \"Enter\") {\n      handleSaveTreeItemTitle(value);\n    }\n  };\n\n  const handleOnBlur: InputProps[\"onBlur\"] = ({ currentTarget: { value } }) => {\n    handleSaveTreeItemTitle(value);\n  };\n\n  return (\n    <>\n      <ListItem divider={true} onClick={() => setCollapsed(!collapsed)}>\n        {collapsed ? <KeyboardArrowRightIcon /> : <KeyboardArrowDownIcon />}\n        {treeItemIdOnEditMode === treeItem.id ? (\n          <Input\n            style={{ marginRight: \"20%\", color: \"orange\" }}\n            onKeyDown={handleEnterPress}\n            onChange={(event) => setChangedTitle(event.currentTarget.value)}\n            onBlur={handleOnBlur}\n            value={changeTitle}\n            placeholder={\"new node\"}\n            disableUnderline={true}\n            fullWidth={true}\n            autoFocus={true}\n          />\n        ) : (\n          <ListItemText primary={title} />\n        )}\n        <ListItemSecondaryAction>\n          <IconButton onClick={handleChildTreeItemAddition} edge=\"end\">\n            <AddIcon />\n          </IconButton>\n          <IconButton onClick={handleTreeItemEdition} edge=\"end\">\n            <EditIcon />\n          </IconButton>\n          <IconButton onClick={handleTreeItemDeletion} edge=\"end\">\n            <DeleteIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n\n      {!collapsed && (\n        <div style={{ paddingLeft: 10 }}>\n          {treeItems\n            .filter((child) => child.parentId === treeItem.id)\n            .map((child) => (\n              <TreeItem key={child.id} treeItem={child} />\n            ))}\n        </div>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as uuid } from \"uuid\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport List from \"@material-ui/core/List\";\nimport CreateNewFolderIcon from \"@material-ui/icons/CreateNewFolder\";\n\nimport { addRootTreeItem, setTreeItemIdOnEditMode, State } from \"../redux\";\n\nimport { TreeItem } from \"./TreeItem/TreeItem\";\n\nexport const TreeList: React.FC = () => {\n  const dispatch = useDispatch();\n  const treeItems = useSelector<State, State[\"treeItems\"]>(\n    (state) => state.treeItems\n  );\n\n  return (\n    <React.Fragment>\n      <IconButton\n        aria-label=\"create\"\n        onClick={() => {\n          const id = uuid();\n          dispatch(addRootTreeItem(id));\n          dispatch(setTreeItemIdOnEditMode(id));\n        }}\n      >\n        <CreateNewFolderIcon fontSize=\"large\" />\n      </IconButton>\n      <List>\n        {treeItems\n          .filter((treeItem) => !treeItem.parentId)\n          .map((treeItem) => (\n            <TreeItem key={treeItem.id} treeItem={treeItem} />\n          ))}\n      </List>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\n\nimport { TreeList } from \"./components/TreeList\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Container>\n        <TreeList />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport { saveTreeItems, loadTreeItems } from \"./localStorage\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { rootReducer } from \"./redux\";\n\nconst store = createStore(rootReducer, {\n  treeItems: loadTreeItems(),\n  treeItemIdOnEditMode: null,\n});\n\nstore.subscribe(async () => {\n  saveTreeItems(store.getState().treeItems);\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}